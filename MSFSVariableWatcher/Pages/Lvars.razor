@page "/lvars"
@using FSUIPC;


<h3>Lvars</h3>

Count: @MSFSVariableServices.LVars.Count
<br />
Last update: @DateTime.Now
<br />
<span title="Automatically refresh the list of LVars">
    <input type="checkbox" @bind="autoRefresh" /> Auto refresh
</span>
<br />
<span title="Hide LVars that have not changed">
    <input type="checkbox" @bind="hideUnchanged" /> Hide unchanged
</span>
<br />
<span title="Keep LVars that have changed at least once in the list">
    <input type="checkbox" @bind="keepChanged" /> Keep changed
</span>
<br />
<span>Search: </span>
<input @bind="search" />
<br />
<button @onclick="BlacklistVisibleLVars" title="Remove all LVARs currently visible from list">Add visible LVARs to blacklist</button>
<button @onclick="ClearBlacklist">Clear blacklist</button>
<span>Blacklist count: @blacklist.Count</span>
<br />

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var v in getListFiltered())
        {          
            <tr>
                <td>@v.Name</td>

                @if (HasChanged(v.Name))
                {
                    <td style="color:#DAF7A6 ;background-color:#101010">@v.Value</td>
                }
                else
                {
                    <td>@v.Value</td>
                }

            </tr>
        }
    </tbody>
</table>

@code {
    bool autoRefresh = true;
    bool hideUnchanged = true;
    bool keepChanged = false;

    string search = "";
    private HashSet<string> blacklist = new HashSet<string>();
    private HashSet<string> keepChangedSet = new HashSet<string>();

    private Dictionary<string, DateTime> lastChanged = new();


    private bool HasChanged(string v)
    {
        if (!lastChanged.ContainsKey(v))
        {
            return false;
        }

        if (DateTime.Now - lastChanged[v] < TimeSpan.FromSeconds(5))
        {
            return true;
        }

        return false;
    }

    private List<FsLVar> getListFiltered()
    {
        Dictionary<string, bool> response = new();

        foreach (var v in MSFSVariableServices.LVars.Names.ToList())
        {
            response[v] = true;
        }

        if (!string.IsNullOrEmpty(search))
        {
            foreach (var n in MSFSVariableServices.LVars.Names.ToList().Where(x => !x.ToLower().Contains(search.ToLower())))
            {
                response[n] = false;
            }
        }

        if (!keepChanged) 
        {
            keepChangedSet.Clear();
        }

        if (hideUnchanged)
        {
            foreach (var n in MSFSVariableServices.LVars.Names.ToList())
            {
                if (keepChangedSet.Contains(n))
                {
                    continue;
                }

                if (!HasChanged(n))
                {
                    response[n] = false;
                } else
                {
                    if (keepChanged)
                    {
                        keepChangedSet.Add(n);
                    };
                }
            }
        }



        List<FsLVar> filtered = new();
        foreach (var r in response.Where(r => r.Value == true))
        {
            if (blacklist.Contains(r.Key))
            {
                continue;
            }

            filtered.Add(MSFSVariableServices.LVars[r.Key]);
        }

        return filtered;
    }

    protected override void OnInitialized()
    {
        MSFSVariableServices.OnValuesChanged += OnValuesChanged;

        foreach (var v in MSFSVariableServices.LVars.Names)
        {
            MSFSVariableServices.LVars[v].OnValueChanged += SingleLvarChanged;
        }
    }

    private void SingleLvarChanged(object? sender, LVarEvent e)
    {
        lastChanged[e.LVar.Name] = DateTime.Now;
    }

    private void BlacklistVisibleLVars()
    {
        var visibleLVars = getListFiltered().Select(lvar => lvar.Name);
        foreach (var lvarName in visibleLVars)
        {
            blacklist.Add(lvarName);
        }
    }

    private void ClearBlacklist()
    {
        blacklist.Clear();
    }

    private void OnValuesChanged(object? sender, EventArgs e)
    {
        if (!autoRefresh)
        {
            return;
        }

        InvokeAsync(() =>
     {
         StateHasChanged();
     });
    }
}
